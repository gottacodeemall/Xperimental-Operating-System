alias counter S0;
alias physicalSP S1;
physicalSP=[PTBR+2*(SP/512)]*512+SP%512;
alias syscallno S2;
syscallno=[physicalSP-1];
alias childPCB S3;
alias curPID S10;
curPID=(PTBR-1024)/8;
alias curPCB S11;
curPCB=READY_LIST+32*curPID;
alias childPTBR S4;
alias childPID S5;
alias count S6;
alias count2 S7;
alias enter S8;
alias freepage S9;
alias flag 	S12;
alias calcred S13;

if(syscallno==8) then
	//fork
	//find a free pcb
	
	counter=0;
	while(counter<32) do
		if([READY_LIST+32*counter+1]==0) then
			break;
		endif;	
		counter=counter+1;
	endwhile;
	if(counter==32) then
		print "PCB Full";
		[physicalSP-2]=-1;
		ireturn;
	endif;
	//set the childpid to counter controversial but no other option
	
	childPID= counter;
	[READY_LIST+32*counter]=childPID;
	
	//check if memlist has a page for stack
				
	count=70; //some rand num
	counter=0;
	while(counter<64) do
		if([MEM_LIST+counter]==0) then
			count=counter;
			break;
		endif;
		counter=counter+1;
	endwhile;
	//if no place for stack use page replacement		
	if(count==70) then
		print "~MEM stack fixed";
		counter=curPID;
		flag=0;
		while(1) do
			count=0;
			while(count<3) do
				calcred=[1024+counter*8+2*count];	
				if(calcred!=-1&&[1024+counter*8+2*count+1]=="01"&&[MEM_LIST+calcred]==1) then
					load(6,20);
					count2=448;
					while(count2<512) do
						if([DISK_LIST+count2]==0) then
							break;
						endif;
						count2=count2+1;
					endwhile;
					if(count2==512) then
						print "~SWAP";
						inline "JMP 11842";
					endif;		
					store(calcred,count2);
					[DISK_LIST+count2]=[DISK_LIST+count2]+1;
					[1024+counter*8+2*count]=count2;
					[1024+counter*8+2*count+1]="00";
					freepage=calcred;
					flag=1;
					store(6,20);
					break;
				endif;
				if(calcred!=-1&&[1024+counter*8+2*count+1]=="11"&&[MEM_LIST+calcred]==1) then
					[1024+counter*8+2*count+1]="01";
				endif;
				count=count+1;
			endwhile;
			if(flag==1) then
				break;
			endif;
			counter=counter+1;
			counter=counter%32;
		endwhile;
		count=freepage;
	endif;
	
	[MEM_LIST+count]=1;
	
	//copy stack parent to child
	counter=0;
	while(counter<512) do
		[count*512+counter]=[[PTBR+6]*512+counter];
		counter=counter+1;
	endwhile;
	//print "new child pid";
	//print freepage;
	childPTBR=1024+8*childPID;
	[childPTBR+6]=count;
	[childPTBR+7]="01";
	load(6,20); //load the disk free list
	
	//updating the childPTBR
	counter=0;
	while(counter<3) do
		[childPTBR+2*counter]=[PTBR+2*counter];
		[childPTBR+2*counter+1]=[PTBR+2*counter+1];
		if([PTBR+2*counter]!=-1) then
			if([PTBR+2*counter+1]=="01" || [PTBR+2*counter+1]=="11") then
				[MEM_LIST+[PTBR+2*counter]]=[MEM_LIST+[PTBR+2*counter]]+1;
			endif;
			if([PTBR+2*counter]>=448&&([PTBR+2*counter+1]=="00" || [PTBR+2*counter+1]=="10")) then	
				[DISK_LIST+[PTBR+2*counter]]=[DISK_LIST+[PTBR+2*counter]]+1;
			endif;	
		endif;
		counter=counter+1;
	endwhile;
	store(6,20); 
					
	//setting up the pcb for child process
	
	childPCB=READY_LIST+32*childPID;
	[childPCB+1]=1;
	[childPCB+2]=BP;
	[childPCB+3]=SP-1;
	[childPCB+5]=childPTBR;
	[childPCB+6]=4;
	[childPCB+4]=[physicalSP];
	[childPCB+7]=R0;
	[childPCB+8]=R1;
	[childPCB+9]=R2;
	[childPCB+10]=R3;
	[childPCB+11]=R4;
	[childPCB+12]=R5;
	[childPCB+13]=R6;
	[childPCB+14]=R7;
	counter=15;
	while(counter<31) do
		count=[curPCB+counter];
		[childPCB+counter]=count;
		[childPCB+counter+1]=[curPCB+counter+1];
		if(count!=-1) then
			[FILE_TABLE+count+1]=[FILE_TABLE+count+1]+1;
		endif;	
		counter=counter+2;
	endwhile;
	// important note: here the the pointer to system wide open file table consists of the crct value of entry(range:0 - 127) in steps of 2 so no need to multiply by 2 
	// same is applicable to the fat index spread out over(range:0-512) in steps of 8
	[childPCB+31]=curPID;
	
	[physicalSP-2]=childPID;
	count=[childPTBR+6];
	//get the block no of child stack from childPTBR
	[count*512+SP%512-2]=-2;	
	[READY_LIST+childPID*32+1]=1;

	print "fork succ";
	breakpoint;
	ireturn;
endif;	
			
