alias cause S0;
alias vpagenum S1;
alias ipaddr S2;
alias counter S3;
alias freepage S4;
alias curpid S5;
curpid = (PTBR-1024)/8;
alias flag S6;
alias count2 S7;
alias count S8;


cause=EFR%10;
vpagenum=(EFR/10)%100;
ipaddr=EFR/1000;
if(cause!=0) then
	print "fault";
	inline "JMP 11842";
endif;
//print "exception";
if([PTBR+2*vpagenum]==-1) then
	print "invalid addr";
	inline "JMP 11842"; //jump to exit
endif;

counter=0;
while(counter<64) do
	if([MEM_LIST+counter]==0) then
		break;
	endif;
	counter=counter+1;
endwhile;
//print " ";
//print counter;
//print " ";
if(counter!=64) then
	freepage=counter;
else
	freepage=-1;		
endif;			

if(freepage==-1) then
	//print "no free page";
	counter=curpid;
	breakpoint;
	flag=0;
	while(1) do
		count=0;
		while(count<3) do	
			//print "new";
			//print counter;
			//print " ";
			//print [1024+counter*8+2*count];
			//print [1024+counter*8+2*count+1];
			//print [MEM_LIST+[1024+counter*8+2*count]];
			if([1024+counter*8+2*count]!=-1&&[1024+counter*8+2*count+1]=="01"&&[MEM_LIST+[1024+counter*8+2*count]]==1) then
				//print "b ";
				load(6,20);
				count2=448;
				while(count2<512) do
					if([DISK_LIST+count2]==0) then
						break;
					endif;
					count2=count2+1;
				endwhile;
				if(count2==512) then
					print "~SWAP";
					inline "JMP 11842";
				endif;		
				store([1024+counter*8+2*count],count2);
				[DISK_LIST+count2]=[DISK_LIST+count2]+1;
				//print "increase";
				freepage=[1024+counter*8+2*count];
				//print "free page";
				//print freepage;
				[1024+counter*8+2*count]=count2;
				[1024+counter*8+2*count+1]="00";
				flag=1;
				store(6,20);
				break;
			endif;
			if([1024+counter*8+2*count]!=-1&&[1024+counter*8+2*count+1]=="11"&&[MEM_LIST+[1024+counter*8+2*count]]==1) then
				//print "c ";
				[1024+counter*8+2*count+1]="01";
			endif;
			count=count+1;
		endwhile;
		if(flag==1) then
			break;
		endif;
		counter=counter+1;
		counter=counter%32;
	endwhile;
endif;
		
//print "check";				
if([PTBR+2*vpagenum]<448) then
	load(freepage,[PTBR+2*vpagenum]);		
else
	load(freepage,[PTBR+2*vpagenum]);
	load(6,20);
	[DISK_LIST+[PTBR+2*vpagenum]]=[DISK_LIST+[PTBR+2*vpagenum]]-1;	
	//print "reduction";	
	store(6,20);
endif;
//print "check2";
[MEM_LIST+freepage]=1;
[PTBR+2*vpagenum]=freepage;
//print PTBR+2*vpagenum;
[PTBR+2*vpagenum+1]="11";
SP=SP+1;
//print "check3";
[[PTBR+2*(SP/512)]*512+SP%512]=ipaddr;
//print "check4"; 
ireturn;
