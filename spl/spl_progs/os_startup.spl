alias counter S0;


	// important note: here the the pointer to system wide open file table consists of the crct value of entry(range:0 - 127) in steps of 2 so no need to multiply by 2 
	// same is applicable to the fat index spread out over(range:0-512) in steps of 8
	
	
	
	
//load exception handler
load(7,1);
load(8,2);
//load timer
load(9,3);
load(10,4);
//load interrupt 7
load(23,17);
load(24,18);

//load FAT
load(5,19);
//load dfl
load(6,20);
[READY_LIST+0]=0;

//load init
//load(25,21);
//load(26,22);
//load(27,23);

//setting the state of PCB to 0(terminated)
counter=1;
while(counter<32) do
	[READY_LIST+32*counter+1]=0;
	counter=counter+1;
endwhile;

//setting page_table PTBR which point to page table used for add translation
PTBR = 1024;
PTLR = 4;
[PTBR + 0] = 21;
[PTBR + 1] = "00";
[PTBR + 2] = 22;
[PTBR + 3] = "00";
[PTBR + 4] = 23;
[PTBR + 5] = "00";
[PTBR + 6] = 25;
[PTBR + 7] = "01";
[READY_LIST + 1] = 2;
//logical page number 3 for stack
SP = 3 * 512;
//putting the value of IP on top of stack of INIT process page 28
[25 * 512] = 0;
//load interrupt 1
load(11,5);
load(12,6);

//load interrupt 2
load(13,7);
load(14,8);

//load interrupt 3
load(15,9);
load(16,10);

//load interrupt 4
load(17,11);
load(18,12);

//load interrupt 5
load(19,13);
load(20,14);


//load interrupt 6
load(21,15);
load(22,16);


//setting system wide open file table


counter = 0;
while(counter<128) do
	[FILE_TABLE+counter]=-1;
	[FILE_TABLE+counter+1]=0;
	counter =  counter + 2;
endwhile;

//setting PCB of INIT

counter=15;
while(counter<=30) do
	[READY_LIST+counter]=-1;
	[READY_LIST+counter+1]=0;
	counter = counter + 2;
endwhile;
//setting the parent of init process to itself
[READY_LIST+31]=0;

//setting the mem-FREE-list 
counter=0;
while(counter<64) do
	if(counter<26) then
		[MEM_LIST+counter]=1;
	else
		[MEM_LIST+counter]=0;	
	endif;
	counter=counter+1;
endwhile;

counter=448;
while(counter<512) do
	[DISK_LIST+counter]=0;
	counter=counter+1;
endwhile;
store(6,20);							

breakpoint;
		
ireturn;

